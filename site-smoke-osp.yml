---
- name: Gather OSP Server facts
  hosts: workstation
  tasks:
    - name: Fetch Instance Info
      os_server_info:
        cloud: openstack
      register: result

    - debug:
        var: result

    - name: Add host
      add_host:
        name: "{{ item.public_v4 }}"
        group: "{{ item.metadata.group }}"
        #ansible_ssh_private_key_file: ~/.ssh/openstack.pem
        #ansible_ssh_user: cloud-user
      with_items: "{{result.openstack_servers}}"
  
    - debug:
        msg: "Frontend: {{ item.0  }},APP - {{ item.1 }},DB: {{ item.2 }}"
      with_nested: 
        - "{{ groups.frontends }}" 
        - "{{ groups.apps }}" 
        - "{{ groups.appdbs }}" 
      
- name: APPs Server to Database connectivity smoke tests
  hosts: apps:appdbs
  gather_facts: true
  become: true
  tags:
    - smoketest  
  tasks:
#    - debug:
#        msg: "First App server  {{ groups.apps[0] }},Second App server {{ groups.apps[1] }},Frontend Server {{ groups.frontends[0] }},DB Server {{ groups.appdbs[0] }}"

    - name: Smoketest Postgres database
      postgresql_ping:
        db: flask_db
        login_host: "{{ item.1 }}"
        login_user: flask
        login_password: redhat
        ssl_mode: disable
      delegate_to: "{{ item.0 }}"
      run_once: true    
      with_nested:
        - "{{ groups.apps }}"
        - "{{ groups.appdbs }}"



- name: Check webserver response
  hosts: workstation
  gather_facts: false
  tasks:
    - name: Curl website to check response
      uri:
        url: "http://{{ item }}/ping"
        return_content: yes
      until: '"alive" in result_webpage.content'
      retries: 10
      delay: 1
      register: result_webpage
      with_items: "{{ groups.frontends  }}" 
 
    - debug:
        var: result_webpage 

#    - name: Fail if Alive is not in webpage
#      fail:
#      when: "'Alive' not in result.content"
